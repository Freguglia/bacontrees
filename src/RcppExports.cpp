// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compress_logical_cpp
std::string compress_logical_cpp(LogicalVector logical_vec, int chunk_size);
RcppExport SEXP _bacontrees_compress_logical_cpp(SEXP logical_vecSEXP, SEXP chunk_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type logical_vec(logical_vecSEXP);
    Rcpp::traits::input_parameter< int >::type chunk_size(chunk_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(compress_logical_cpp(logical_vec, chunk_size));
    return rcpp_result_gen;
END_RCPP
}
// check_active
LogicalVector check_active(List nodes);
RcppExport SEXP _bacontrees_check_active(SEXP nodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type nodes(nodesSEXP);
    rcpp_result_gen = Rcpp::wrap(check_active(nodes));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bacontrees_compress_logical_cpp", (DL_FUNC) &_bacontrees_compress_logical_cpp, 2},
    {"_bacontrees_check_active", (DL_FUNC) &_bacontrees_check_active, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_bacontrees(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
