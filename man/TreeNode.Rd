% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TreeNode.R
\name{TreeNode}
\alias{TreeNode}
\title{TreeNode Class}
\description{
This class represents a tree node with a path, depth, and various methods
for managing its state and validating its path.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{childrenIndex}}{Character vector to hold indices of child nodes.}

\item{\code{counts}}{Numeric vector to hold counts.}

\item{\code{isLeaf}}{Logical value indicating if the node is a leaf.}

\item{\code{extra}}{List to hold extra information.
Initialize a TreeNode

This method initializes a tree node with a given path, calculates its depth,
and sets the parent path if applicable.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TreeNode-new}{\code{TreeNode$new()}}
\item \href{#method-TreeNode-print}{\code{TreeNode$print()}}
\item \href{#method-TreeNode-activate}{\code{TreeNode$activate()}}
\item \href{#method-TreeNode-deactivate}{\code{TreeNode$deactivate()}}
\item \href{#method-TreeNode-isActive}{\code{TreeNode$isActive()}}
\item \href{#method-TreeNode-getDepth}{\code{TreeNode$getDepth()}}
\item \href{#method-TreeNode-getPath}{\code{TreeNode$getPath()}}
\item \href{#method-TreeNode-getParentPath}{\code{TreeNode$getParentPath()}}
\item \href{#method-TreeNode-validatePath}{\code{TreeNode$validatePath()}}
\item \href{#method-TreeNode-clone}{\code{TreeNode$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TreeNode-new"></a>}}
\if{latex}{\out{\hypertarget{method-TreeNode-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TreeNode$new(path)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{A character string representing the path of the node.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new instance of the TreeNode class.
Print the path of the node

This method prints the path of the node to the console.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TreeNode-print"></a>}}
\if{latex}{\out{\hypertarget{method-TreeNode-print}{}}}
\subsection{Method \code{print()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TreeNode$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Additional arguments passed to the \code{cat} function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None. Prints the path to the console.
Activate the node

This method sets the node's active status to TRUE.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TreeNode-activate"></a>}}
\if{latex}{\out{\hypertarget{method-TreeNode-activate}{}}}
\subsection{Method \code{activate()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TreeNode$activate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None.
Deactivate the node

This method sets the node's active status to FALSE.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TreeNode-deactivate"></a>}}
\if{latex}{\out{\hypertarget{method-TreeNode-deactivate}{}}}
\subsection{Method \code{deactivate()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TreeNode$deactivate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None.
Check if the node is active

This method returns the active status of the node.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TreeNode-isActive"></a>}}
\if{latex}{\out{\hypertarget{method-TreeNode-isActive}{}}}
\subsection{Method \code{isActive()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TreeNode$isActive()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Logical value indicating if the node is active.
Get the depth of the node

This method returns the depth of the node.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TreeNode-getDepth"></a>}}
\if{latex}{\out{\hypertarget{method-TreeNode-getDepth}{}}}
\subsection{Method \code{getDepth()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TreeNode$getDepth()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Numeric value representing the depth of the node.
Get the path of the node

This method returns the path of the node.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TreeNode-getPath"></a>}}
\if{latex}{\out{\hypertarget{method-TreeNode-getPath}{}}}
\subsection{Method \code{getPath()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TreeNode$getPath()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Character string representing the path of the node.
Get the parent path of the node

This method returns the parent path of the node.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TreeNode-getParentPath"></a>}}
\if{latex}{\out{\hypertarget{method-TreeNode-getParentPath}{}}}
\subsection{Method \code{getParentPath()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TreeNode$getParentPath()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Character string representing the parent path of the node.
Validate the node path against an alphabet

This method validates the node's path by checking if all elements of the path
(excluding the first element) are in the provided alphabet.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TreeNode-validatePath"></a>}}
\if{latex}{\out{\hypertarget{method-TreeNode-validatePath}{}}}
\subsection{Method \code{validatePath()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TreeNode$validatePath(Alphabet)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{Alphabet}}{An object containing a \code{symbols} vector to validate against.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Logical value indicating if the path is valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TreeNode-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TreeNode-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TreeNode$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
